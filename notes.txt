Filtering: (.filter, opposite: .exclude)
Precise:
>>> Task.objects.filter(start_date="2024-01-25")
<QuerySet [<Task: TT2>]>
Range:
>>> Task.objects.filter(start_date__range=["2024-01-20", "2024-01-25"])
<QuerySet [<Task: TT>, <Task: TT2>]>

NOTE the __name, because Employee is a FK and Django otherwise assumes an id (hence no strings allowed)
>>> Task.objects.filter(assigned_employee__name="Employee1")
<QuerySet [<Task: TT>, <Task: TT3>]>

>>> Task.objects.filter(customer__name="VW")
<QuerySet [<Task: TT>, <Task: TT3>]>

Adding duration for a range:

t_range = Task.objects.filter(start_date__range=["2024-01-20", "2024-01-25"]) # <QuerySet [<Task: TT>, <Task: TT3>]>
dur = 0
for obj in t_range:
	dur += obj.real_duration
>>> dur = 3 + 70

YTI
- Leave admin be for staff (can change everything)
- Normal users should only be able to:
	- register (pass name and e-mail over into Employee DB)
	- add Tags and Companies maybe?
	- access add_real_duration, limited to sanity check (x hours per day max)
	
- Auto-Email people at around 22h a) they are an employee and b) registered to an unfinished task and c) did not add any hours for today
- max 12h per day for duration

- Security: allow to be hosted on a specific IP only and/or allow registration from people with @rapidproto.de E-Mail only

Dashboard:
- Filter by Day, Week, Month, Year(?)
- Show users that are assigned to projects and idle users (limit idle to people that have done a project within at least 2 months to avoid showing laid off people) AND not on vacation
- Show people on vacation seperately and/or show available users/users that finished a project recently
	i.e. User 1 finished last project on 
- Show top 1-3 users with the most projects done that time frame
- Show project with the most logged hours
- Show customer with the most logged hours/projects
- Show users that had to be emailed the most
- no restrictions for "Vacation Project", able to create retroactively, but requires start and end date for filtering

Maybes
- Date as PK to sort by (and FK in Tasks?)
- copy static structure from Time(1)

Export idea:
http://docs.pyexcel.org/en/latest/

Tasks able to be added by everyone

Merge customer/project (rename categories)

duration: drop down 0.25h steps til 12h (total project)

Admin has Groups with various permissions
Change "app" to something else maybe, like "RapidlY"

For presenting Django in the Doc:

https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Introduction

Serializers, Jira XML export -> this app
https://medium.com/@bobbykboseoffice/mastering-data-serialization-in-django-from-built-in-to-custom-c151029deaed

GeeksModel.objects.create(
                       title="title1",
                       description="description1").save()

User.objects.all()[1].username.replace(".", " ")

>>> Hours.objects.last()
<Hours: Pll>

These are the same:

>>> from django.db.models import Q
>>> Hours.objects.filter(Q(employee__username="Moppits123") & Q(time=2.25))
<QuerySet [<Hours: Pll>]>

>>> Hours.objects.filter(employee__username="Moppits123").filter(time=2.25)
<QuerySet [<Hours: Pll>]>

>>> Hours.objects.filter(employee__username="Moppits123",time=2.25)
<QuerySet [<Hours: Pll>]>

querying based on location (via e-mail)
>>> Hours.objects.filter(employee__email__endswith=".gr", project__name="P1")
<QuerySet [<Hours: G>]>

Show everyone who worked on Project "P1":

for emp in Hours.objects.filter(project__name="P1"):
...     emp.employee.username
... 
'yilmazm'
'Mehmet.Yilmaz'
'Moppits123'
'Grc'

Could then link from there to an autogenerated page based on id:
>>> User.objects.filter(username="yilmazm")[0].id
3
like users/3

which should then contain even more info of them

--- Only let staff see specific pages like upcoming vacations, user details

from django.contrib.auth import REDIRECT_FIELD_NAME
from django.contrib.auth.decorators import user_passes_test


def staff_member_required(view_func=None, redirect_field_name=REDIRECT_FIELD_NAME,
                          login_url='admin:login'):
    """
    Decorator for views that checks that the user is logged in and is a staff
    member, redirecting to the login page if necessary.
    """
    actual_decorator = user_passes_test(
        lambda u: u.is_active and u.is_staff,
        login_url=login_url,
        redirect_field_name=redirect_field_name
    )
    if view_func:
        return actual_decorator(view_func)
    return actual_decorator

--- 

- Vacations, public facing and admin portion for approval
- aggregates, vac_info update for the above^
- excessively long projects? first entry at x, last entry at y with at least z entries in between ( i.e at least one entry every month)